name: Release

on:
  push:
    branches: ["main"]

jobs:

  preconditions:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.repo_ids.outputs.REPO_NAME }}
      org_name: ${{ steps.repo_ids.outputs.ORG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Check token
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}"]; then
            echo "Must provide a GITHUB_TOKEN secret in order to run release workflow"
            exit 1
          fi
      - name: Get repository identifiers
        id: repo_ids
        run: |
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          ORG_NAME=$(echo "${{ github.event.repository.owner.name }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "ORG_NAME=$ORG_NAME" >> $GITHUB_OUTPUT

  static-checks:
    name: Run Static Analysis Checks
    strategy:
      matrix:
        command: [lint, depcheck, check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: 22.x
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm ci
      - name: Lint
        run: npm run ${{ matrix.command }}

  tests:
    name: Run tests
    strategy:
      matrix:
        command: ['test', 'test:integration']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: 22.x
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - uses: actions/setup-dotnet@v5
        with:
            dotnet-version: '8.0.x'
      - name: Install wasm tools
        run: dotnet workload install wasm-tools-net8
      - name: Install Packages
        run: npm ci
      - name: Build
        run: npm run publish
      - name: Run tests
        run: npm run ${{ matrix.command }}


  check-version:
    name: "Check version"
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.get_version.outputs.IS_NEW_VERSION }}
      version: ${{ steps.get_version.outputs.VERSION }}
      build_date: ${{ steps.get_version.outputs.BUILD_DATE }}
      is_prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}

    steps:
      - uses: actions/checkout@v5
      - name: Check version
        id: get_version
        uses: digicatapult/check-version@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: 'Publish package to NPMJS'
    needs:
      - static-checks
      - tests
      - check-version
    runs-on: ubuntu-latest
    if: ${{ needs.check-version.outputs.is_new_version == 'true' }}

    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: '22.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@digicatapult'
      - uses: actions/setup-dotnet@v5
        with:
            dotnet-version: '8.0.x'
      - name: Install wasm tools
        run: dotnet workload install wasm-tools-net8
      - name: Install Packages
        run: npm ci
      - name: Build
        run: npm run publish
      - name: Publish to npmjs packages
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS_TOKEN }}
  
  publish:
    name: 'Publish release'
    needs: [publish-npm, check-version]
    runs-on: ubuntu-latest
    if: ${{ needs.check-version.outputs.is_new_version == 'true' }}
    
    steps:
      - uses: actions/checkout@v5
      # Build github release
      - name: Build release version
        uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          automatic_release_tag: ${{ needs.check-version.outputs.version }}
          prerelease: false
          title: Release ${{ needs.check-version.outputs.version }}
      - name: Build release latest
        uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          automatic_release_tag: latest
          prerelease: false
          title: Latest Release ${{ needs.check-version.outputs.version }}