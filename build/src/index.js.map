{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport { DtdlObjectModel, InterfaceInfo } from '../interop/DtdlOm.js'\nimport { errorHandler, isResolutionException } from './error.js'\nimport { Parser } from './interop.js'\n\nconst { log, error } = console\n\nexport const searchForJsonFiles = (directory: string): string[] => {\n  if (!fs.existsSync(directory)) {\n    error(`'${directory}' not a valid filepath`)\n    return []\n  }\n\n  return fs\n    .readdirSync(directory)\n    .map((file) => path.join(directory, file))\n    .reduce((jsonFiles, fullPath) => {\n      if (fs.statSync(fullPath).isDirectory()) {\n        return jsonFiles.concat(searchForJsonFiles(fullPath)) //recursive\n      } else if (path.extname(fullPath) === '.json') {\n        return jsonFiles.concat(fullPath)\n      }\n      return jsonFiles\n    }, [] as string[])\n}\n\nconst readJsonFile = (filepath: string): unknown | null => {\n  try {\n    const file = fs.readFileSync(filepath, 'utf-8')\n    const json = JSON.parse(file)\n    return json\n  } catch (err) {\n    error(`Invalid JSON at '${filepath}'`)\n    error(err)\n    return null\n  }\n}\n\nconst combineJson = (filepaths: string[]) => {\n  const combinedJson: unknown[] = []\n\n  for (const filepath of filepaths) {\n    const json = readJsonFile(filepath)\n    if (json === null) {\n      return null // exit on any error\n    }\n    combinedJson.push(json)\n  }\n\n  return combinedJson\n}\n\nconst validateFile = (filepath: string, parserModule: Parser, incResolutionException: boolean): boolean => {\n  try {\n    const file = fs.readFileSync(filepath, 'utf-8')\n    parserModule.parse(file)\n    log(`Successfully validated '${filepath}'`)\n    return true\n  } catch (err) {\n    if (!incResolutionException && isResolutionException(err)) {\n      // ignore resolution exception\n      log(`Successfully validated '${filepath}'`)\n      return true\n    }\n    error(`Error parsing '${filepath}'`)\n    errorHandler(err)\n    return false\n  }\n}\n\nconst parseDtdl = (json: unknown[], parserModule: Parser): DtdlObjectModel | null => {\n  try {\n    const model = JSON.parse(parserModule.parse(JSON.stringify(json))) as DtdlObjectModel\n    log(`Successfully parsed`)\n    return model\n  } catch (err) {\n    error(`Error parsing`)\n    errorHandler(err)\n    return null\n  }\n}\n\nexport const validateDirectories = (directory: string, parser: Parser, incResolutionException: boolean): boolean => {\n  log(`${parser.parserVersion()}\\n`)\n  log(`Validating DTDL at: '${directory}'`)\n\n  const filepaths = searchForJsonFiles(directory)\n  if (filepaths.length < 1) return false\n\n  log(`Found ${filepaths.length} files:`)\n  log(filepaths)\n\n  for (const filepath of filepaths) {\n    const isValid = validateFile(filepath, parser, incResolutionException)\n    if (!isValid) return false // stop validating if error\n  }\n\n  log(`All files validated!\\n`)\n  return true\n}\n\nexport const parseDirectories = (directory: string, parser: Parser): DtdlObjectModel | null => {\n  log(`${parser.parserVersion()}\\n`)\n  log(`Parsing DTDL at: '${directory}'`)\n\n  const filepaths = searchForJsonFiles(directory)\n  if (filepaths.length < 1) return null\n\n  log(`Found ${filepaths.length} files:`)\n  log(filepaths)\n\n  const fullJson = combineJson(filepaths)\n  if (fullJson === null) return null\n\n  const fullModel = parseDtdl(fullJson, parser)\n  if (fullModel === null) return null\n\n  log(`All files parsed!\\n`)\n  log(`Entities:`)\n  log(Object.keys(fullModel))\n\n  // Example type guard\n  const interfaces: InterfaceInfo[] = Object.values(fullModel).filter(\n    (value): value is InterfaceInfo => value.EntityKind === 'Interface'\n  )\n  log(`Number of interfaces: ${interfaces.length}`)\n\n  return fullModel\n}\n"],"names":["fs","path","errorHandler","isResolutionException","log","error","console","searchForJsonFiles","directory","existsSync","readdirSync","map","file","join","reduce","jsonFiles","fullPath","statSync","isDirectory","concat","extname","readJsonFile","filepath","readFileSync","JSON","parse","err","combineJson","filepaths","combinedJson","json","push","validateFile","parserModule","incResolutionException","parseDtdl","model","stringify","validateDirectories","parser","parserVersion","length","parseDirectories","fullJson","fullModel","Object","keys","interfaces","values","filter","value","EntityKind"],"mappings":"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"}