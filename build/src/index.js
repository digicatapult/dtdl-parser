import e from"fs";import r from"path";import{errorHandler as t,isResolutionException as l}from"./error.js";let{log:n,error:s}=console;export const searchForJsonFiles=t=>e.existsSync(t)?e.readdirSync(t).map(e=>r.join(t,e)).reduce((t,l)=>e.statSync(l).isDirectory()?t.concat(searchForJsonFiles(l)):".json"===r.extname(l)?t.concat(l):t,[]):(s(`'${t}' not a valid filepath`),[]);let i=r=>{try{let t=e.readFileSync(r,"utf-8");return JSON.parse(t)}catch(e){return s(`Invalid JSON at '${r}'`),s(e),null}},a=e=>{let r=[];for(let t of e){let e=i(t);if(null===e)return null;r.push(e)}return r},o=(r,i,a)=>{try{let t=e.readFileSync(r,"utf-8");return i.parse(t),n(`Successfully validated '${r}'`),!0}catch(e){if(!a&&l(e))return n(`Successfully validated '${r}'`),!0;return s(`Error parsing '${r}'`),t(e),!1}},u=(e,r)=>{try{let t=JSON.parse(r.parse(JSON.stringify(e)));return n("Successfully parsed"),t}catch(e){return s("Error parsing"),t(e),null}};export const validateDirectories=(e,r,t)=>{n(`${r.parserVersion()}
`),n(`Validating DTDL at: '${e}'`);let l=searchForJsonFiles(e);if(l.length<1)return!1;for(let e of(n(`Found ${l.length} files:`),n(l),l))if(!o(e,r,t))return!1;return n(`All files validated!
`),!0};export const parseDirectories=(e,r)=>{n(`${r.parserVersion()}
`),n(`Parsing DTDL at: '${e}'`);let t=searchForJsonFiles(e);if(t.length<1)return null;n(`Found ${t.length} files:`),n(t);let l=a(t);if(null===l)return null;let s=u(l,r);if(null===s)return null;n(`All files parsed!
`),n("Entities:"),n(Object.keys(s));let i=Object.values(s).filter(e=>"Interface"===e.EntityKind);return n(`Number of interfaces: ${i.length}`),s};
//# sourceMappingURL=index.js.map